https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    
bool dfs(int node, int parent, vector<int> adj[], unordered_set<int>&s1)
    {
        s1.insert(node);
        
        for(auto i:adj[node])
        {
            if(!s1.count(i)) 
            {
                if (dfs(i,node,adj,s1))
                return 1;
            }
            
            else if(s1.count(i) && i!=parent)
            return true;

        }
        
        return 0;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        
        int parent = -1;
        
        unordered_set<int>s1;
    
        bool ans=false;
    
        for(int i=0;i<V;i++)
        {
            if(!s1.count(i) && dfs(i,parent,adj,s1))
            return 1;
            
        }
        
        return 0;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends