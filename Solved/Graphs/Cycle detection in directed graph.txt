https://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    
bool dfs(int node, vector<int> adj[], vector<pair<int,int>>&v)
    {
        v[node].first=1;
        v[node].second=1;
        
        for(auto i:adj[node])
        {
            if(!v[i].first)
            {
                if(dfs(i,adj,v))
                return true;
            }
            
            else if(v[i].second==1)
            return true;
            
        }
        
        v[node].second=0;
        
        return 0;
    }
    
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        
        vector<pair<int,int>>v(V,make_pair(0,0));
        
        bool ans=false;
    
        for(int i=0;i<V;i++)
        {
            if(!v[i].first==1)
            {ans = dfs(i,adj,v);
            
            if(ans)
            return 1;}
        }
        
        return 0;
        
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends