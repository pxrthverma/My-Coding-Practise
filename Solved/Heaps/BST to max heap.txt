https://practice.geeksforgeeks.org/problems/bst-to-max-heap/1

//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left, *right;
};

/* Helper function that allocates a new node
with the given data and NULL left and right
pointers. */
Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}

Node* buildTree(string str)
{
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str; )
        ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}
void postorderTraversal(Node* root)
{
    if (!root)
        return;

    // recur on left subtree
    postorderTraversal(root->left);

    // then recur on right subtree
    postorderTraversal(root->right);

    // print the root's data
    cout << root->data << " ";
}



// } Driver Code Ends
//User function Template for C++

/*struct Node {
    int data;
    Node *left, *right;
};*/

class Solution{
  public:
    
    void solve(Node* root, vector<int>&inOrder)
    {
        if(root==NULL)return;
        
        solve(root->left,inOrder);
        inOrder.push_back(root->data);
        solve(root->right,inOrder);
    }
    
    void reOrder(Node*&root, vector<int>inOrder)
    {
        stack<Node*>s1;
        s1.push(root);
        
        while(!s1.empty() && inOrder.size()>0)
        {
            int n = s1.size();
            
            for(int i=0;i<n;i++)
            {
                int m = inOrder.size();
                Node* temp = s1.top();
                temp->data=inOrder[m-1];
                inOrder.pop_back();
                s1.pop();
                
                if(temp->left)s1.push(temp->left);
                if(temp->right)s1.push(temp->right);
            }
        }
    }
    
    void convertToMaxHeapUtil(Node* root)
    {
        vector<int>inOrder;
        solve(root,inOrder);
        
        int i=inOrder.size()-1;
        
        reOrder(root,inOrder);
    }    
};


//{ Driver Code Starts.

int main()
{
    int t;
    cin >> t;
    getchar();
    while (t--)
    {
        string inp, ch;
        getline(cin, inp);
        struct Node* root = buildTree(inp);
        Solution ob;
        ob.convertToMaxHeapUtil(root);
        postorderTraversal(root);
        cout << "\n";
    }
    return 0;
}


// } Driver Code Ends