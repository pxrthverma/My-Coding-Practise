https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution{
    public:
    
    void solve(int i, int j, vector<vector<int>> &arr, 
                vector<vector<int>>&visited, string &str, vector<string>&ans, int n, string ch)
    {
        if(i<0 || j<0 || i>=n || j>=n || visited[i][j] || arr[i][j]==0)
        return;
        
        str+=ch;
        
        visited[i][j]=1;
        
        if(i==n-1 && j==n-1)
        {
            visited[i][j]=0;
            ans.push_back(str);
            str.pop_back();
            return;
        }
        
        //UP
        solve(i-1, j, arr, visited, str, ans, n, "U");
        
        //DOWN
        solve(i+1, j, arr, visited, str, ans, n, "D");
        
        //RIGHT
        solve(i, j+1, arr, visited, str, ans, n, "R");
        
        //LEFT
        solve(i, j-1, arr, visited, str, ans, n, "L");
        
        str.pop_back();
        visited[i][j]=0;
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string>ans;
        
        if(m[0][0]==0)return ans;
        
        vector<vector<int>>visited(n,vector<int>(n,0));
        
        int i=0,j=0;
        string str="";
        
        string ch = "";
        
        solve(i, j, m, visited, str, ans, n, ch);
        
        return ans;
    }
};

    


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends